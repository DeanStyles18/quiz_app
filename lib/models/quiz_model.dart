class Autogenerated {
  int? id;
  String? name;
  String? title;
  String? description;
  String? difficultyLevel;
  String? topic;
  String? time;
  bool? isPublished;
  String? createdAt;
  String? updatedAt;
  int? duration;
  String? endTime;
  String? negativeMarks;
  String? correctAnswerMarks;
  bool? shuffle;
  bool? showAnswers;
  bool? lockSolutions;
  bool? isForm;
  bool? showMasteryOption;
  String? readingMaterial;
  String? quizType;
  bool? isCustom;
  String? bannerId;
  String? examId;
  bool? showUnanswered;
  String? endsAt;
  String? lives;
  String? liveCount;
  int? coinCount;
  int? questionsCount;
  String? dailyDate;
  int? maxMistakeCount;
  List<String>? readingMaterials;
  List<Questions>? questions;
  int? progress;

  Autogenerated(
      {this.id,
      this.name,
      this.title,
      this.description,
      this.difficultyLevel,
      this.topic,
      this.time,
      this.isPublished,
      this.createdAt,
      this.updatedAt,
      this.duration,
      this.endTime,
      this.negativeMarks,
      this.correctAnswerMarks,
      this.shuffle,
      this.showAnswers,
      this.lockSolutions,
      this.isForm,
      this.showMasteryOption,
      this.readingMaterial,
      this.quizType,
      this.isCustom,
      this.bannerId,
      this.examId,
      this.showUnanswered,
      this.endsAt,
      this.lives,
      this.liveCount,
      this.coinCount,
      this.questionsCount,
      this.dailyDate,
      this.maxMistakeCount,
      this.readingMaterials,
      this.questions,
      this.progress});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
      id: json['id'],
      name: json['name'],
      title: json['title'],
      description: json['description'],
      difficultyLevel: json['difficulty_level'],
      topic: json['topic'],
      time: json['time'],
      isPublished: json['is_published'],
      createdAt: json['created_at'],
      updatedAt: json['updated_at'],
      duration: json['duration'],
      endTime: json['end_time'],
      negativeMarks: json['negative_marks'],
      correctAnswerMarks: json['correct_answer_marks'],
      shuffle: json['shuffle'],
      showAnswers: json['show_answers'],
      lockSolutions: json['lock_solutions'],
      isForm: json['is_form'],
      showMasteryOption: json['show_mastery_option'],
      readingMaterial: json['reading_material'],
      quizType: json['quiz_type'],
      isCustom: json['is_custom'],
      bannerId: json['banner_id'],
      examId: json['exam_id'],
      showUnanswered: json['show_unanswered'],
      endsAt: json['ends_at'],
      lives: json['lives'],
      liveCount: json['live_count'],
      coinCount: json['coin_count'],
      questionsCount: json['questions_count'],
      dailyDate: json['daily_date'],
      maxMistakeCount: json['max_mistake_count'],
      readingMaterials: json['reading_materials'] != null
          ? List<String>.from(json['reading_materials'])
          : null,
      questions: json['questions'] != null
          ? (json['questions'] as List)
              .map((i) => Questions.fromJson(i))
              .toList()
          : null,
      progress: json['progress'],
    );
  }
}

class Questions {
  int? id;
  String? description;
  String? difficultyLevel;
  String? topic;
  bool? isPublished;
  String? createdAt;
  String? updatedAt;
  String? detailedSolution;
  String? type;
  bool? isMandatory;
  bool? showInFeed;
  String? pyqLabel;
  int? topicId;
  int? readingMaterialId;
  String? fixedAt;
  String? fixSummary;
  String? createdBy;
  String? updatedBy;
  String? quizLevel;
  String? questionFrom;
  String? language;
  String? photoUrl;
  String? photoSolutionUrl;
  bool? isSaved;
  String? tag;
  List<Options>? options;
  ReadingMaterial? readingMaterial;

  Questions({
    this.id,
    this.description,
    this.difficultyLevel,
    this.topic,
    this.isPublished,
    this.createdAt,
    this.updatedAt,
    this.detailedSolution,
    this.type,
    this.isMandatory,
    this.showInFeed,
    this.pyqLabel,
    this.topicId,
    this.readingMaterialId,
    this.fixedAt,
    this.fixSummary,
    this.createdBy,
    this.updatedBy,
    this.quizLevel,
    this.questionFrom,
    this.language,
    this.photoUrl,
    this.photoSolutionUrl,
    this.isSaved,
    this.tag,
    this.options,
    this.readingMaterial,
  });

  factory Questions.fromJson(Map<String, dynamic> json) {
    return Questions(
      id: json['id'],
      description: json['description'],
      difficultyLevel: json['difficulty_level'],
      topic: json['topic'],
      isPublished: json['is_published'],
      createdAt: json['created_at'],
      updatedAt: json['updated_at'],
      detailedSolution: json['detailed_solution'],
      type: json['type'],
      isMandatory: json['is_mandatory'],
      showInFeed: json['show_in_feed'],
      pyqLabel: json['pyq_label'],
      topicId: json['topic_id'],
      readingMaterialId: json['reading_material_id'],
      fixedAt: json['fixed_at'],
      fixSummary: json['fix_summary'],
      createdBy: json['created_by'],
      updatedBy: json['updated_by'],
      quizLevel: json['quiz_level'],
      questionFrom: json['question_from'],
      language: json['language'],
      photoUrl: json['photo_url'],
      photoSolutionUrl: json['photo_solution_url'],
      isSaved: json['is_saved'],
      tag: json['tag'],
      options: json['options'] != null
          ? (json['options'] as List).map((i) => Options.fromJson(i)).toList()
          : null,
      readingMaterial: json['reading_material'] != null
          ? ReadingMaterial.fromJson(json['reading_material'])
          : null,
    );
  }
}

class Options {
  int? id;
  String? description;
  int? questionId;
  bool? isCorrect;
  String? createdAt;
  String? updatedAt;
  bool? unanswered;
  String? photoUrl;

  Options({
    this.id,
    this.description,
    this.questionId,
    this.isCorrect,
    this.createdAt,
    this.updatedAt,
    this.unanswered,
    this.photoUrl,
  });

  factory Options.fromJson(Map<String, dynamic> json) {
    return Options(
      id: json['id'],
      description: json['description'],
      questionId: json['question_id'],
      isCorrect: json['is_correct'],
      createdAt: json['created_at'],
      updatedAt: json['updated_at'],
      unanswered: json['unanswered'],
      photoUrl: json['photo_url'],
    );
  }
}

class ReadingMaterial {
  int? id;
  String? keywords;
  String? content;
  String? createdAt;
  String? updatedAt;
  List<String>? contentSections;
  PracticeMaterial? practiceMaterial;

  ReadingMaterial({
    this.id,
    this.keywords,
    this.content,
    this.createdAt,
    this.updatedAt,
    this.contentSections,
    this.practiceMaterial,
  });

  factory ReadingMaterial.fromJson(Map<String, dynamic> json) {
    return ReadingMaterial(
      id: json['id'],
      keywords: json['keywords'],
      content: json['content'],
      createdAt: json['created_at'],
      updatedAt: json['updated_at'],
      contentSections: json['content_sections'] != null
          ? List<String>.from(json['content_sections'])
          : null,
      practiceMaterial: json['practice_material'] != null
          ? PracticeMaterial.fromJson(json['practice_material'])
          : null,
    );
  }
}

class PracticeMaterial {
  List<String>? content;
  List<String>? keywords;

  PracticeMaterial({this.content, this.keywords});

  factory PracticeMaterial.fromJson(Map<String, dynamic> json) {
    return PracticeMaterial(
      content:
          json['content'] != null ? List<String>.from(json['content']) : null,
      keywords:
          json['keywords'] != null ? List<String>.from(json['keywords']) : null,
    );
  }
}

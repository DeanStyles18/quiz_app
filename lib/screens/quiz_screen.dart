import 'dart:async';
import 'package:flutter/material.dart';
import '../models/quiz_model.dart';
import '../services/quiz_service.dart';
import '../widgets/fade_animation.dart';
import 'result_screen.dart';
import '../widgets/loading_animation.dart';
import 'package:audioplayers/audioplayers.dart';

class QuizScreen extends StatefulWidget {
  @override
  _QuizScreenState createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen>
    with SingleTickerProviderStateMixin {
  final QuizService _quizService = QuizService();
  Autogenerated? _quiz;
  int _currentQuestionIndex = 0;
  int _score = 0;
  bool _isLoading = true;
  bool _hasError = false;
  int _lives = 3;
  late AnimationController _slideController;
  late Animation<Offset> _slideAnimation;
  late Timer _timer;
  int _timeLeft = 30;
  int? _selectedOptionIndex;
  bool _optionSelected = false;
  final AudioPlayer _audioPlayer = AudioPlayer();

  @override
  void initState() {
    super.initState();
    _loadQuiz();

    _slideController = AnimationController(
      duration: Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _slideController.dispose();
    _timer.cancel();
    _audioPlayer.dispose();
    super.dispose();
  }

  Future<void> _loadQuiz() async {
    try {
      final quiz = await _quizService.fetchQuiz();
      setState(() {
        _quiz = quiz;
        _isLoading = false;
      });
      _slideController.forward();
      _startTimer();
    } catch (e) {
      setState(() {
        _hasError = true;
        _isLoading = false;
      });
    }
  }

  void _startTimer() {
    _timeLeft = 30;
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (_timeLeft > 0) {
          _timeLeft--;
        } else {
          _timer.cancel();
          _moveToNextQuestion();
        }
      });
    });
  }

  void _playCorrectSound() async {
    await _audioPlayer.play(AssetSource('buzz2.mp3'));
  }

  void _answerQuestion(int selectedIndex) {
    if (_optionSelected) return;

    final currentQuestion = _quiz!.questions![_currentQuestionIndex];
    final selectedOption = currentQuestion.options![selectedIndex];

    setState(() {
      _optionSelected = true;
      _selectedOptionIndex = selectedIndex;

      if (selectedOption.isCorrect == true) {
        _score += 4;
        _playCorrectSound();
      } else {
        _lives--;
        _score = (_score > 0) ? _score - 1 : 0;
        _playBuzzSound();
      }
    });

    _timer.cancel();

    // Delay for 1 second before moving to the next question or showing results
    Future.delayed(Duration(seconds: 1), () {
      if (_lives > 0) {
        _moveToNextQuestion();
      } else {
        _showResults();
      }
    });
  }

  void _playBuzzSound() async {
    await _audioPlayer.stop();
    await _audioPlayer.play(AssetSource('buzz.mp3'));
  }

  void _moveToNextQuestion() {
    if (_currentQuestionIndex < _quiz!.questions!.length - 1) {
      setState(() {
        _slideController.reset();
        _currentQuestionIndex++;
        _optionSelected = false;
        _selectedOptionIndex = null;
      });
      _slideController.forward();
      _startTimer();
    } else {
      _showResults();
    }
  }

  void _showResults() {
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => ResultScreen(
          score: _score,
          totalQuestions: _quiz!.questions!.length,
          quizTitle: _quiz!.title ?? 'Quiz',
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return LoadingAnimation();
    }

    if (_hasError) {
      return Scaffold(
        body: Center(child: Text('Error loading quiz. Please try again.')),
      );
    }

    final question = _quiz!.questions![_currentQuestionIndex];

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Colors.indigo[900]!, Colors.indigo[700]!],
          ),
          image: DecorationImage(
            image: AssetImage('assets/images/pattern.jpg'),
            fit: BoxFit.cover,
            opacity: 0.1,
          ),
        ),
        child: SafeArea(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Container(
                height: 6,
                child: LinearProgressIndicator(
                  value: (_currentQuestionIndex + 1) / _quiz!.questions!.length,
                  backgroundColor: Colors.white24,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Container(
                          padding:
                              EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Text(
                            'Q${_currentQuestionIndex + 1}/${_quiz!.questions!.length}',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        Container(
                          padding:
                              EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Row(
                            children: [
                              Icon(Icons.timer, color: Colors.white, size: 20),
                              SizedBox(width: 4),
                              Text(
                                '$_timeLeft s',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 24),
                    SlideTransition(
                      position: _slideAnimation,
                      child: Container(
                        padding: EdgeInsets.all(24),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(20),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 10,
                              offset: Offset(0, 5),
                            ),
                          ],
                        ),
                        child: Column(
                          children: [
                            Icon(
                              Icons.quiz,
                              size: 40,
                              color: Colors.indigo,
                            ),
                            SizedBox(height: 16),
                            Text(
                              question.description ?? '',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.black87,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: ListView.builder(
                  padding: EdgeInsets.all(16),
                  itemCount: question.options?.length ?? 0,
                  itemBuilder: (context, index) {
                    final option = question.options![index];
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 12.0),
                      child: FadeAnimation(
                        duration: Duration(milliseconds: 300 + (index * 100)),
                        child: Container(
                          decoration: BoxDecoration(
                            color: _selectedOptionIndex == index
                                ? (option.isCorrect == true
                                    ? Colors.green.withOpacity(0.8)
                                    : Colors.red.withOpacity(0.8))
                                : Colors.white.withOpacity(0.9),
                            borderRadius: BorderRadius.circular(16),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.1),
                                blurRadius: 5,
                                offset: Offset(0, 2),
                              ),
                            ],
                          ),
                          child: Material(
                            color: Colors.transparent,
                            child: InkWell(
                              onTap: _optionSelected
                                  ? null
                                  : () => _answerQuestion(index),
                              borderRadius: BorderRadius.circular(16),
                              child: Container(
                                padding: EdgeInsets.all(20),
                                child: Row(
                                  children: [
                                    Container(
                                      width: 30,
                                      height: 30,
                                      decoration: BoxDecoration(
                                        color: Colors.indigo.withOpacity(0.1),
                                        borderRadius: BorderRadius.circular(15),
                                      ),
                                      child: Center(
                                        child: Text(
                                          String.fromCharCode(65 + index),
                                          style: TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.indigo,
                                          ),
                                        ),
                                      ),
                                    ),
                                    SizedBox(width: 16),
                                    Expanded(
                                      child: Text(
                                        option.description ?? '',
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.black87,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.favorite, color: Colors.red),
                    SizedBox(width: 8),
                    Text(
                      'Lives: $_lives',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(width: 24),
                    Icon(Icons.star, color: Colors.amber),
                    SizedBox(width: 8),
                    Text(
                      'Score: $_score',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
